/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and favorite journals,
 * while allowing public read access to journal entries.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the owning user.
 * - /journals/{journalId}: Stores journal data, publicly readable.
 * - /users/{userId}/favorite_journals/{favoriteJournalId}: Stores user's favorite journals, accessible only to the owning user.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Journal data is publicly readable to allow for easy discovery and display.
 * - Users can only manage their own favorite journals.
 *
 * Denormalization for Authorization:
 * - The `FavoriteJournal` documents in the `/users/{userId}/favorite_journals/{favoriteJournalId}` collection MUST contain the `userId` within the document itself.
 *   This allows security rules to validate ownership without additional `get()` operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to journal documents.
     * @path /journals/{journalId}
     * @allow (get) Any user can read any journal.
     * @allow (list) Any user can list journals.
     * @deny (create) No user can create a journal (admin only).
     * @principle Allows public read access to journals.
     */
    match /journals/{journalId} {
      allow get, list: if true;
      allow create: if false;  // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false;  // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to favorite journal documents for a user.
     * @path /users/{userId}/favorite_journals/{favoriteJournalId}
     * @allow (create) User with ID 'user123' can create a favorite journal entry in their own subcollection.
     * @allow (get) User with ID 'user123' can read a favorite journal entry in their own subcollection.
     * @allow (update) User with ID 'user123' can update a favorite journal entry in their own subcollection.
     * @allow (delete) User with ID 'user123' can delete a favorite journal entry in their own subcollection.
     * @deny (create) User with ID 'user456' cannot create a favorite journal entry for 'user123'.
     * @principle Enforces document ownership for favorite journals.
     */
    match /users/{userId}/favorite_journals/{favoriteJournalId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == request.resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    // --- Helper functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and the resource exists.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}